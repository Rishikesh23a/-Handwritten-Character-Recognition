# -*- coding: utf-8 -*-
"""Handwritten Character Recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z2OzYgRzBZKWVRI5IntC13iJcZ7cVfl3

Load the Dataset
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

# Load CSV
df = pd.read_csv("/content/A_Z Handwritten Data.csv")

# Separate features and labels
X = df.drop('0', axis=1).values  # pixel data
y = df['0'].values               # labels (0â€“25)

# Normalize pixel values
X = X / 255.0

# Reshape to (n, 28, 28, 1)
X = X.reshape(-1, 28, 28, 1)

# One-hot encode labels
y = to_categorical(y, num_classes=26)

"""Train-Test Split"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Build CNN Model"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.3),
    Dense(26, activation='softmax')
])

"""Compile & Train"""

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=10, batch_size=128, validation_split=0.1)

"""Evaluate"""

loss, acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {acc:.2f}")

"""Predict & Show Example"""

import matplotlib.pyplot as plt

# Pick a test sample
idx = 0
sample = X_test[idx].reshape(28,28)

plt.imshow(sample, cmap='gray')
plt.title("Predicted: " + chr(np.argmax(model.predict(X_test[idx:idx+1])) + 65))  # ASCII
plt.axis('off')
plt.show()

"""Predict and Show 10 Random Test Images"""

import random

label_map = {i: chr(65 + i) for i in range(26)}  # 0='A', 1='B', ..., 25='Z'

plt.figure(figsize=(12, 6))
for i in range(10):
    idx = random.randint(0, len(X_test) - 1)
    image = X_test[idx].reshape(28, 28)
    true_label = label_map[np.argmax(y_test[idx])]
    pred_label = label_map[np.argmax(model.predict(X_test[idx:idx+1]))]

    plt.subplot(2, 5, i+1)
    plt.imshow(image, cmap='gray')
    plt.title(f"True: {true_label}\nPred: {pred_label}")
    plt.axis('off')

plt.tight_layout()
plt.suptitle("Model Predictions vs True Labels", fontsize=16, y=1.05)
plt.show()

"""Predict and Count Overall Accuracy (Extra View)"""

from sklearn.metrics import accuracy_score

y_pred = np.argmax(model.predict(X_test), axis=1)
y_true = np.argmax(y_test, axis=1)

acc = accuracy_score(y_true, y_pred)
print(f"Overall Test Accuracy: {acc:.4f}")

"""Visualize Misclassified Samples"""

misclassified_idxs = np.where(y_pred != y_true)[0]

if len(misclassified_idxs) > 0:
    print(f"Total misclassified samples: {len(misclassified_idxs)}")

    plt.figure(figsize=(12, 6))
    for i, idx in enumerate(misclassified_idxs[:10]):
        image = X_test[idx].reshape(28, 28)
        true_label = label_map[y_true[idx]]
        pred_label = label_map[y_pred[idx]]

        plt.subplot(2, 5, i+1)
        plt.imshow(image, cmap='gray')
        plt.title(f"T: {true_label} / P: {pred_label}")
        plt.axis('off')

    plt.tight_layout()
    plt.suptitle("Examples of Misclassified Characters", fontsize=16, y=1.05)
    plt.show()
else:
    print("Perfect prediction on test data!")

"""Confusion Matrix"""

from sklearn.metrics import confusion_matrix
import seaborn as sns

cm = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(12,10))
sns.heatmap(cm, annot=True, fmt='d', xticklabels=label_map.values(), yticklabels=label_map.values())
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title("Confusion Matrix")
plt.show()

""" Add EarlyStopping (optional)"""

from tensorflow.keras.callbacks import EarlyStopping

early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)
model.fit(X_train, y_train, epochs=20, batch_size=128, validation_split=0.1, callbacks=[early_stop])